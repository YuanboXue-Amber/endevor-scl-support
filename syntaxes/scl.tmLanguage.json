{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Endevor SCL",
    "patterns": [
        {
            "include": "#keywords"
        },
        {
            "include": "#strings"
        }
    ],
    "repository": {
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.scl",
                    "match": "\\b(SET(\\b))\\b"
                },
                {
                    "name": "keyword.control.scl",
                    "match": "\\b(ADD(\\b))\\b"
                },
                {
                    "name": "keyword.control.scl",
                    "match": "\\b(ARC(HIVE|HIV|HI|H|\\b))\\b"
                },
                {
                    "name": "keyword.control.scl",
                    "match": "\\b(COP(Y|\\b))\\b"
                },
                {
                    "name": "keyword.control.scl",
                    "match": "\\b(DEL(ETE|ET|E|\\b))\\b"
                },
                {
                    "name": "keyword.control.scl",
                    "match": "\\b(GEN(ERATE|ERAT|ERA|ER|E|\\b))\\b"
                },
                {
                    "name": "keyword.control.scl",
                    "match": "\\b(LIS(T|\\b))\\b"
                },
                {
                    "name": "keyword.control.scl",
                    "match": "\\b(MOV(E|\\b))\\b"
                },
                {
                    "name": "keyword.control.scl",
                    "match": "\\b(PRI(NT|N|\\b))\\b"
                },
                {
                    "name": "keyword.control.scl",
                    "match": "\\b(RES(TORE|TOR|TO|T|\\b))\\b"
                },
                {
                    "name": "keyword.control.scl",
                    "match": "\\b(RET(RIEVE|RIEV|RIE|RI|R|\\b))\\b"
                },
                {
                    "name": "keyword.control.scl",
                    "match": "\\b(SIG(NIN|NI|N|\\b))\\b"
                },
                {
                    "name": "keyword.control.scl",
                    "match": "\\b(TRA(NSFER|NSFE|NSF|NS|N|\\b))\\b"
                },
                {
                    "name": "keyword.control.scl",
                    "match": "\\b(UPD(ATE|AT|A|\\b))\\b"
                },
                {
                    "name": "keyword.control.scl",
                    "match": "\\b(VAL(IDATE|IDAT|IDA|ID|I|\\b))\\b"
                },
                {
                    "name": "support.class.secondarykeyword.scl",
                    "match": "\\b(ACT(ION|IO|I|\\b))\\b"
                },
                {
                    "name": "support.class.secondarykeyword.scl",
                    "match": "\\b(BUI(LD|L|\\b))\\b"
                },
                {
                    "name": "support.class.secondarykeyword.scl",
                    "match": "\\b(FRO(M|\\b))\\b"
                },
                {
                    "name": "support.class.secondarykeyword.scl",
                    "match": "\\b(OPT(IONS|ION|IO|I|\\b))\\b"
                },
                {
                    "name": "support.class.secondarykeyword.scl",
                    "match": "\\b(TO(\\b))\\b"
                },
                {
                    "name": "support.class.secondarykeyword.scl",
                    "match": "\\b(WHE(RE|R|\\b))\\b"
                },
                {
                    "name": "support.class.secondarykeyword.scl",
                    "match": "\\b(STO(PRC|PR|P|\\b))\\b"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.single.scl",
                    "begin": "'",
                    "end": "'",
                    "patterns": [
                        {
                            "name": "constant.character.escape.scl",
                            "match": "\\\\."
                        }
                    ]
                },
                {
                    "name": "string.quoted.double.scl",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.scl",
                            "match": "\\\\."
                        }
                    ]
                }
            ]
        }
    },
    "scopeName": "source.scl"
}